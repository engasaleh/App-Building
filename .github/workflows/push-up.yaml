name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/nodejs-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install
      - run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
      - name: Deploy to AWS EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
          AWS_HOST: ${{ secrets.AWS_HOST }}
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.AWS_HOST }} <<EOF
            mkdir -p ~/.ssh
            echo "$AWS_SSH_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa

            docker pull $DOCKER_IMAGE
            docker stop nodejs-app
            docker rm nodejs-app
            docker run -d --name nodejs-app --restart unless-stopped -p $DEPLOY_PORT:3000 $DOCKER_IMAGE
          EOF
      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.ssh/id_rsa
