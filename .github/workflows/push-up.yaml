name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/nodejs-app

jobs:
  # Job 1: Run Tests
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  # Job 2: Build and Deploy
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Deploy to AWS EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
        run: |
          # Configure SSH
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          cat > ~/.ssh/config <<EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            IdentityFile ~/.ssh/deploy_key
EOF

          chmod 600 ~/.ssh/config

          ssh -i ~/.ssh/deploy_key ec2-user@${{ secrets.AWS_HOST }} "\
            set -e && \
            echo 'Pulling Docker image...' && \
            docker pull $DOCKER_IMAGE && \
            docker ps -q --filter 'name=nodejs-app' | xargs --no-run-if-empty docker stop && \
            docker ps -a -q --filter 'name=nodejs-app' | xargs --no-run-if-empty docker rm && \
            echo 'Starting new container...' && \
            docker run -d \
              --name nodejs-app \
              --restart unless-stopped \
              -p $DEPLOY_PORT:3000 \
              $DOCKER_IMAGE"

      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.ssh/deploy_key ~/.ssh/config
